buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.10"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            debuggable true
        }
        debug {
            debuggable true
        }
    }

}

group = 'com.edinaftc.ftc'
version = '1.2.0-alpha'
def mArtifact = 'NinevoltLib'

repositories {
    flatDir {
        dirs '../libs'
    }
}

dependencies {
    compile(name: 'RobotCore-release', ext: 'aar')
    compile(name: 'Hardware-release', ext: 'aar')
    compile(name: 'FtcCommon-release', ext: 'aar')
    compile(name: 'Analytics-release', ext: 'aar')
    compile(name: 'WirelessP2p-release', ext: 'aar')
    compile(name: 'Analytics-release', ext: 'aar')
}

install {
    repositories.mavenInstaller {
        pom.project {
            name 'Ninevolt'
            description 'A utilities library for FTC'
            url 'https://github.com/edinaftc/Ninevolt'
            inceptionYear '2017'

            packaging 'aar'
            groupId project.group
            artifactId mArtifact
            version project.version
            licenses {
                license {
                    name 'The MIT License (MIT)'
                    url 'https://opensource.org/licenses/MIT'
                }
            }
            scm {
                connection 'https://github.com/edinaftc/Ninevolt.git'
                url 'https://github.com/edinaftc/Ninevolt'

            }
            developers {
                developer {
                    id = 'richiksc'
                    name 'Richik SC'
                }
                developer {
                    id = 'NickDim'
                    name 'Nick Dimitrov'
                }
            }
        }
    }
}

Properties bintrayProperties = new Properties()
if (rootProject.file('specific.properties').isFile()) {
    bintrayProperties.load(project.rootProject.file('specific.properties').newDataInputStream())
}

bintray {
    user = bintrayProperties.getProperty('bintray_user') ?: System.getenv('BINTRAY_USER')
    key = bintrayProperties.get('bintray_key') ?: System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'ftc'
        name = mArtifact
        userOrg = 'edinaftc'
        licenses = ['MIT']
        websiteUrl = 'https://github.com/edinaftc/Ninevolt'
        vcsUrl = 'https://github.com/edinaftc/Ninevolt.git'
        issueTrackerUrl = 'https://github.com/edinaftc/Ninevolt/issues'
        githubRepo = 'edinaftc/Ninevolt'
        publish = true
        version {
            name = project.version
            desc = 'Ninevolt FTC Library ' + project.version
            released = new Date()
            vcsTag = 'v' + project.version
        }
    }
}

ext.getDocDir = { ->
    try {
        def branchout = new ByteArrayOutputStream()
        def travisBranch = System.getenv('TRAVIS_BRANCH')
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = branchout
        }
        def branch = branchout.toString().trim();
        if (branch.equals('master') || travisBranch.equals('master') || branch == null) {
            return ''
        } else {
            return (travisBranch ?: branch) + '/'
        }
    } catch (ignored) {
        return null
    }
}

task javadoc(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompiler.classpath
        }
    }
    source = android.sourceSets.main.java.srcDirs
    exclude 'com/edinaftc/ninevolt/examples/**/*'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    destinationDir = file('../docs/' + getDocDir() + 'javadoc')
}

configurations {
    published
}

task sourceJar(type: Jar) {
    classifier "sources"
    from 'src/main/java'
}

artifacts {
    published sourceJar
}

def artifactoryUser
def artifactoryPass
def artifactoryCtxUrl
def artPropsFile = project.rootProject.file('artifactory.properties')
if (artPropsFile.isFile()) {
    Properties artifactoryProperties = new Properties()
    artifactoryProperties.load(artPropsFile.newDataInputStream())
    artifactoryUser = artifactoryProperties.getProperty('user')
    artifactoryPass = artifactoryProperties.getProperty('password')
    artifactoryCtxUrl = artifactoryProperties.getProperty('contextUrl')
} else {
    artifactoryUser = System.getenv("EDINAFTC_ARTIFACTORY_USER")
    artifactoryPass = System.getenv("EDINAFTC_ARTIFACTORY_KEY")
    artifactoryCtxUrl = System.getenv("EDINAFTC_ARTIFACTORY_URL")
}

artifactory {
    contextUrl = artifactoryCtxUrl   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-snapshot-local'
            username = artifactoryUser
            password = artifactoryPass
            maven = true

        }

        defaults {
            publishConfigs('archives', 'published')
            properties = ['build.status': project.status.toString()]
            publishPom = true // Publish generated POM files to Artifactory (true by default)
            publishIvy = false // Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
    resolve {
        repository {
            repoKey = 'libs-snapshot'
            username = artifactoryUser
            password = artifactoryPass
            maven = true

        }
    }
}

artifactoryPublish {
    dependsOn sourceJar
}
